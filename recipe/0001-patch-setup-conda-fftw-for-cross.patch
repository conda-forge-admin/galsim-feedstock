--- setup.py.orig	2021-07-07 15:16:54.000000000 -0700
+++ setup.py	2021-07-07 17:04:22.000000000 -0700
@@ -193,100 +193,15 @@
 
 # Check for the fftw3 library in some likely places
 def find_fftw_lib(output=False):
-    import distutils.sysconfig
-
-    if debug: output = True
-    try_libdirs = []
-
-    # Start with the explicit FFTW_DIR, if present.
-    if 'FFTW_DIR' in os.environ:
-        try_libdirs.append(os.environ['FFTW_DIR'])
-        try_libdirs.append(os.path.join(os.environ['FFTW_DIR'],'lib'))
-
-    # Add the python system library directory.
-    try_libdirs.append(distutils.sysconfig.get_config_var('LIBDIR'))
-
-    # If using Anaconda, add their lib dir in case fftw is installed there.
-    # (With envs, this might be different than the sysconfig LIBDIR.)
-    if 'CONDA_PREFIX' in os.environ:
-        try_libdirs.append(os.path.join(os.environ['CONDA_PREFIX'],'lib'))
-
-    # Try some standard locations where things get installed
-    try_libdirs.extend(['/usr/local/lib', '/usr/lib'])
-    if sys.platform == "darwin":
-        try_libdirs.extend(['/sw/lib', '/opt/local/lib'])
-
-    # Check the directories in LD_LIBRARY_PATH.  This doesn't work on OSX >= 10.11
-    for path in ['LIBRARY_PATH', 'LD_LIBRARY_PATH', 'DYLD_LIBRARY_PATH']:
-        if path in os.environ:
-            for dir in os.environ[path].split(':'):
-                try_libdirs.append(dir)
-
-    # The user's home directory is often a good place to check.
-    try_libdirs.append(os.path.join(os.path.expanduser("~"),"lib"))
-
-    # If the above don't work, the fftw3 module may have the right directory.
-    try:
-        import fftw3
-        try_libdirs.append(fftw3.lib.libdir)
-    except ImportError:
-        pass
-
     if sys.platform == "darwin":
         lib_ext = '.dylib'
     else:
         lib_ext = '.so'
     name = 'libfftw3' + lib_ext
-    if output: print("Looking for ",name)
-    tried_dirs = set()  # Keep track, so we don't try the same thing twice.
-    for dir in try_libdirs:
-        if dir == '': continue  # This messes things up if it's in there.
-        if dir in tried_dirs: continue
-        else: tried_dirs.add(dir)
-        if not os.path.isdir(dir): continue
-        libpath = os.path.join(dir, name)
-        if not os.path.isfile(libpath): continue
-        if output: print("  ", dir, end='')
-        try:
-            lib = ctypes.cdll.LoadLibrary(libpath)
-            if output: print("  (yes)")
-            return libpath
-        except OSError as e:
-            if output: print("  (no)")
-            # Some places use lib64 rather than/in addition to lib.  Try that as well.
-            if dir.endswith('lib') and os.path.isdir(dir + '64'):
-                dir += '64'
-                try:
-                    libpath = os.path.join(dir, name)
-                    if not os.path.isfile(libpath): continue
-                    lib = ctypes.cdll.LoadLibrary(libpath)
-                    if output: print("  ", dir, "  (yes)")
-                    return libpath
-                except OSError:
-                    pass
-    try:
-        libpath = ctypes.util.find_library('fftw3')
-        if libpath == None:
-            raise OSError
-        if os.path.split(libpath)[0] == '':
-            # If the above doesn't return a real path, try this instead.
-            libpath = ctypes.util._findLib_gcc('fftw3')
-            if libpath == None:
-                raise OSError
-        libpath = os.path.realpath(libpath)
-        lib = ctypes.cdll.LoadLibrary(libpath)
-    except Exception as e:
-        print("Could not find fftw3 library.  Make sure it is installed either in a standard ")
-        print("location such as /usr/local/lib, or the installation directory is either in ")
-        print("your LIBRARY_PATH or FFTW_DIR environment variable.")
-        raise
-    else:
-        dir, name = os.path.split(libpath)
-        if output:
-            if dir == '': dir = '[none]'
-            print("  ", dir, "  (yes)")
-        return libpath
+    
+    libpath = os.path.realpath(os.path.join(sys.prefix, 'lib', name))
 
+    return libpath
 
 # Check for Eigen in some likely places
 def find_eigen_dir(output=False):
